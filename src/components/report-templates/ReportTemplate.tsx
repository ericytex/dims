import React from 'react';

interface ReportTemplateProps {
  title: string;
  subtitle?: string;
  reportType: string;
  generatedDate: string;
  generatedBy: string;
  data: any[];
  columns: string[];
  summary?: {
    totalItems: number;
    totalValue?: number;
    statusBreakdown?: Record<string, number>;
  };
}

const ReportTemplate: React.FC<ReportTemplateProps> = ({
  title,
  subtitle,
  reportType,
  generatedDate,
  generatedBy,
  data,
  columns,
  summary
}) => {
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-UG', {
      style: 'currency',
      currency: 'UGX',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    const statusColors: Record<string, string> = {
      'active': 'bg-green-100 text-green-800',
      'inactive': 'bg-red-100 text-red-800',
      'pending': 'bg-yellow-100 text-yellow-800',
      'approved': 'bg-blue-100 text-blue-800',
      'rejected': 'bg-red-100 text-red-800',
      'in_transit': 'bg-purple-100 text-purple-800',
      'delivered': 'bg-green-100 text-green-800',
      'low_stock': 'bg-orange-100 text-orange-800',
      'out_of_stock': 'bg-red-100 text-red-800'
    };
    return statusColors[status.toLowerCase()] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="min-h-screen bg-white">
      {/* Header with Uganda Flag Colors */}
      <div className="bg-white text-slate-800">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              {/* Uganda Coat of Arms */}
              <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center border-4 border-white shadow-lg">
                <img 
                  src="/embleme.jpeg" 
                  alt="Uganda Coat of Arms" 
                  className="w-12 h-12 object-contain"
                />
              </div>
              
              <div>
                <h1 className="text-2xl font-bold text-slate-800">GOU STORES</h1>
                <p className="text-slate-600">Government of Uganda</p>
                <p className="text-slate-500 text-sm">Decentralized Inventory Management System</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-slate-600">
                <p>Republic of Uganda</p>
                <p>Ministry of Finance</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Report Title Section */}
      <div className="bg-white border-b-4 border-yellow-400">
        <div className="container mx-auto px-6 py-8">
          <div className="text-center">
            <h2 className="text-4xl font-bold text-gray-800 mb-2">{title}</h2>
            {subtitle && <p className="text-xl text-gray-600 mb-4">{subtitle}</p>}
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
              <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-blue-500">
                <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">Report Type</h3>
                <p className="text-lg font-semibold text-gray-900">{reportType}</p>
              </div>
              
              <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-green-500">
                <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">Generated Date</h3>
                <p className="text-lg font-semibold text-gray-900">{generatedDate}</p>
              </div>
              
              <div className="bg-white rounded-lg p-4 shadow-sm border-l-4 border-purple-500">
                <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">Generated By</h3>
                <p className="text-lg font-semibold text-gray-900">{generatedBy}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Summary Section */}
      {summary && (
        <div className="bg-white border-b border-gray-200">
          <div className="container mx-auto px-6 py-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Report Summary</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-blue-600">Total Items</p>
                    <p className="text-2xl font-bold text-blue-900">{summary.totalItems.toLocaleString()}</p>
                  </div>
                </div>
              </div>

              {summary.totalValue && (
                <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                  <div className="flex items-center">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-green-600">Total Value</p>
                      <p className="text-2xl font-bold text-green-900">{formatCurrency(summary.totalValue)}</p>
                    </div>
                  </div>
                </div>
              )}

              {summary.statusBreakdown && (
                <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
                  <div className="flex items-center">
                    <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-yellow-600">Statuses</p>
                      <p className="text-2xl font-bold text-yellow-900">{Object.keys(summary.statusBreakdown).length}</p>
                    </div>
                  </div>
                </div>
              )}

              <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-purple-600">Report ID</p>
                    <p className="text-lg font-bold text-purple-900">#{Date.now().toString().slice(-8)}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Status Breakdown */}
            {summary.statusBreakdown && (
              <div className="mt-6">
                <h4 className="text-md font-medium text-gray-700 mb-3">Status Breakdown</h4>
                <div className="flex flex-wrap gap-2">
                  {Object.entries(summary.statusBreakdown).map(([status, count]) => (
                    <span
                      key={status}
                      className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(status)}`}
                    >
                      {status}: {count}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Data Table */}
      <div className="bg-white">
        <div className="container mx-auto px-6 py-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Detailed Data</h3>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 border border-gray-200 rounded-lg">
              <thead className="bg-gradient-to-r from-yellow-400 to-yellow-500">
                <tr>
                  {columns.map((column, index) => (
                    <th
                      key={index}
                      className="px-6 py-3 text-left text-xs font-medium text-gray-900 uppercase tracking-wider border-r border-yellow-300 last:border-r-0"
                    >
                      {column}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {data.map((row, rowIndex) => (
                  <tr key={rowIndex} className={rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    {columns.map((column, colIndex) => {
                      const value = row[column] || row[column.toLowerCase()] || 'N/A';
                      const isStatus = column.toLowerCase().includes('status');
                      const isCurrency = column.toLowerCase().includes('cost') || column.toLowerCase().includes('price') || column.toLowerCase().includes('value');
                      const isNumber = column.toLowerCase().includes('stock') || column.toLowerCase().includes('quantity') || column.toLowerCase().includes('count');
                      
                      return (
                        <td
                          key={colIndex}
                          className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 border-r border-gray-200 last:border-r-0"
                        >
                          {isStatus ? (
                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(value)}`}>
                              {value}
                            </span>
                          ) : isCurrency ? (
                            <span className="font-mono font-medium text-green-700">
                              {typeof value === 'number' ? formatCurrency(value) : value}
                            </span>
                          ) : isNumber ? (
                            <span className="font-mono font-medium text-blue-700">
                              {typeof value === 'number' ? value.toLocaleString() : value}
                            </span>
                          ) : (
                            value
                          )}
                        </td>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {data.length === 0 && (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <p className="text-gray-500 text-lg">No data available for this report</p>
              <p className="text-gray-400 text-sm">Try adjusting your filters or generating a different report type</p>
            </div>
          )}
        </div>
      </div>

      {/* Footer with Signature Areas */}
      <div className="bg-white border-t-4 border-yellow-400">
        <div className="container mx-auto px-6 py-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Generated By */}
            <div className="text-center">
              <div className="border-t-2 border-gray-300 pt-4">
                <p className="text-sm text-gray-600 mb-2">Generated By</p>
                <p className="font-semibold text-gray-800">{generatedBy}</p>
                <p className="text-xs text-gray-500 mt-1">System User</p>
              </div>
            </div>

            {/* Verified By */}
            <div className="text-center">
              <div className="border-t-2 border-gray-300 pt-4">
                <p className="text-sm text-gray-600 mb-2">Verified By</p>
                <div className="h-12 border-b border-gray-300 mb-2"></div>
                <p className="text-xs text-gray-500">Signature</p>
              </div>
            </div>

            {/* Approved By */}
            <div className="text-center">
              <div className="border-t-2 border-gray-300 pt-4">
                <p className="text-sm text-gray-600 mb-2">Approved By</p>
                <div className="h-12 border-b border-gray-300 mb-2"></div>
                <p className="text-xs text-gray-500">Signature</p>
              </div>
            </div>
          </div>

          {/* Report Footer */}
          <div className="mt-8 pt-6 border-t border-gray-200 text-center">
            <div className="flex items-center justify-center space-x-4 mb-2">
              <div className="w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center">
                <div className="w-6 h-6 bg-black rounded-full flex items-center justify-center">
                  <div className="w-4 h-4 bg-red-600 rounded-full"></div>
                </div>
              </div>
              <p className="text-lg font-semibold text-gray-800">GOU STORES</p>
            </div>
            <p className="text-sm text-gray-600">Government of Uganda • Ministry of Finance</p>
            <p className="text-xs text-gray-500 mt-1">
              This report was generated electronically on {generatedDate} • 
              Report ID: #{Date.now().toString().slice(-8)}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReportTemplate;
